from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import os
import tempfile
import io
import json

# Scopes c·∫ßn thi·∫øt - s·ª≠ d·ª•ng drive scope ƒë·ªÉ truy c·∫≠p t·∫•t c·∫£ file
SCOPES = ['https://www.googleapis.com/auth/drive']

# ƒê∆∞·ªùng d·∫´n t·ªõi OAuth2 credentials
OAUTH_CREDENTIALS_FILE = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'oauth_credentials.json')
TOKEN_FILE = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'token.json')

TEMPLATE_FOLDER_ID = "1XUg-J-ycI1i5SFEwgYahyrHuXHfv6dD7"

def get_authenticated_service():
    """L·∫•y service ƒë√£ authenticated v·ªõi OAuth2"""
    creds = None
    
    # Ki·ªÉm tra token ƒë√£ l∆∞u
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    
    # N·∫øu kh√¥ng c√≥ credentials h·ª£p l·ªá, authenticate l·∫°i
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print("üîÑ ƒêang refresh token...")
            creds.refresh(Request())
        else:
            print("üîê C·∫ßn authenticate l·∫°i v·ªõi Google...")
            if not os.path.exists(OAUTH_CREDENTIALS_FILE):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file OAuth credentials: {OAUTH_CREDENTIALS_FILE}")
            
            flow = InstalledAppFlow.from_client_secrets_file(OAUTH_CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        
        # L∆∞u credentials ƒë·ªÉ d√πng l·∫ßn sau
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
    
    return build('drive', 'v3', credentials=creds)

def download_template_from_drive(file_id):
    """Download template t·ª´ Google Drive b·∫±ng OAuth2"""
    try:
        print(f"üîç ƒêang download file v·ªõi ID: {file_id}")
        
        service = get_authenticated_service()
        
        # L·∫•y th√¥ng tin file
        file_metadata = service.files().get(fileId=file_id, fields="id,name").execute()
        file_name = file_metadata.get("name", "unknown")
        print(f"üìÑ T√™n file: {file_name}")
        
        # T·∫°o request download
        request = service.files().get_media(fileId=file_id)
        
        # T·∫°o file t·∫°m th·ªùi
        fh = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
        
        # Download file
        file_io = io.FileIO(fh.name, 'wb')
        downloader = MediaIoBaseDownload(file_io, request)
        
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            if status:
                print(f"üì• Download progress: {int(status.progress() * 100)}%")
        
        file_io.close()
        print(f"‚úÖ Download ho√†n t·∫•t: {fh.name}")
        return fh.name
        
    except Exception as e:
        print(f"‚ùå L·ªói download template: {str(e)}")
        raise

def upload_file_to_drive(file_path: str, filename: str):
    """Upload file l√™n Google Drive b·∫±ng OAuth2"""
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
        
        print(f"üì§ Uploading file: {filename}")
        
        service = get_authenticated_service()
        
        # Metadata cho file
        file_metadata = {
            'name': filename,
            'parents': [TEMPLATE_FOLDER_ID]
        }
        
        # Media upload
        media = MediaFileUpload(
            file_path,
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            resumable=True
        )
        
        # Upload file
        uploaded_file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id,webViewLink,name'
        ).execute()
        
        file_id = uploaded_file.get("id")
        web_link = uploaded_file.get("webViewLink")
        
        print(f"‚úÖ Upload th√†nh c√¥ng!")
        print(f"   File ID: {file_id}")
        print(f"   Link: {web_link}")
        
        return file_id, web_link
        
    except Exception as e:
        print(f"‚ùå L·ªói upload file: {str(e)}")
        raise

def test_oauth_connection():
    """Test k·∫øt n·ªëi OAuth2"""
    try:
        service = get_authenticated_service()
        results = service.files().list(pageSize=1).execute()
        print("‚úÖ K·∫øt n·ªëi OAuth2 th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi OAuth2: {str(e)}")
        return False

def list_files_in_folder():
    """List files trong folder"""
    try:
        service = get_authenticated_service()
        results = service.files().list(
            q=f"'{TEMPLATE_FOLDER_ID}' in parents",
            fields="files(id, name, mimeType, size)"
        ).execute()
        
        items = results.get("files", [])
        print(f"üìÅ Files trong folder (Total: {len(items)}):")
        
        for item in items:
            print(f"   - {item['name']} (ID: {item['id']})")
            
        return items
        
    except Exception as e:
        print(f"‚ùå L·ªói list files: {str(e)}")
        return []